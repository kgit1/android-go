go to aws.amazon.com

sign in to the console   

All services ->
EC2 (ElasticCompute - where elastic means that it will be streched automaticaly depends on your need) ->
Launch Instance ->
AWS Marketplace ->
Search Parse, Select Parse Server powered by Bitnami ->  
Continue ->
Choose t2.micro ->
Rewiev and launch ->
Launch ->  
select Create new key pair ->
key pair name instagramandroid ->
Download key pair -> 
Launche instance ->         
instance name ->
load firefox to connect with ssh through browser lul -> 
Connect ->
ssh client ->
use putty to connect ->
how to use Putty
https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/putty.html?icmpid=docs_ec2_console 

Connecting to Your Linux Instance from Windows Using PuTTY

After you launch your instance, you can connect to it and use it the way that you'd use a computer sitting in front of you.

Note
After you launch an instance, it can take a few minutes for the instance to be ready so that you can connect to it. Check that your instance has passed its status checks - you can view this information in the Status Checks column on the Instances page.
The following instructions explain how to connect to your instance using PuTTY, a free SSH client for Windows. If you receive an error while attempting to connect to your instance, see Troubleshooting Connecting to Your Instance.

Prerequisites

Before you connect to your Linux instance using PuTTY, complete the following prerequisites:

Install PuTTY
Download and install PuTTY from the PuTTY download page. If you already have an older version of PuTTY installed, we recommend that you download the latest version. Be sure to install the entire suite.
Get the ID of the instance
You can get the ID of your instance using the Amazon EC2 console (from the Instance ID column). If you prefer, you can use the describe-instances (AWS CLI) or Get-EC2Instance (AWS Tools for Windows PowerShell) command.
Get the public DNS name of the instance
You can get the public DNS for your instance using the Amazon EC2 console (check the Public DNS (IPv4) column; if this column is hidden, choose the Show/Hide icon and select Public DNS (IPv4)). If you prefer, you can use the describe-instances (AWS CLI) or Get-EC2Instance (AWS Tools for Windows PowerShell) command.
(IPv6 only) Get the IPv6 address of the instance
If you've assigned an IPv6 address to your instance, you can optionally connect to the instance using its IPv6 address instead of a public IPv4 address or public IPv4 DNS hostname. Your local computer must have an IPv6 address and must be configured to use IPv6. You can get the IPv6 address of your instance using the Amazon EC2 console (check the IPv6 IPs field). If you prefer, you can use the describe-instances (AWS CLI) or Get-EC2Instance (AWS Tools for Windows PowerShell) command. For more information about IPv6, see IPv6 Addresses.
Locate the private key
Get the fully qualified path to the location on your computer of the .pem file for the key pair that you specified when you launched the instance.
Enable inbound SSH traffic from your IP address to your instance
Ensure that the security group associated with your instance allows incoming SSH traffic from your IP address. The default security group does not allow incoming SSH traffic by default. For more information, see Authorizing Inbound Traffic for Your Linux Instances.
Converting Your Private Key Using PuTTYgen

PuTTY does not natively support the private key format (.pem) generated by Amazon EC2. PuTTY has a tool named PuTTYgen, which can convert keys to the required PuTTY format (.ppk). You must convert your private key into this format (.ppk) before attempting to connect to your instance using PuTTY.

To convert your private key

Start PuTTYgen (for example, from the Start menu, choose All Programs > PuTTY > PuTTYgen).

Under Type of key to generate, choose RSA.


							RSA key in PuTTYgen
						
If you're using an older version of PuTTYgen, choose SSH-2 RSA.

Choose Load. By default, PuTTYgen displays only files with the extension .ppk. To locate your .pem file, select the option to display files of all types.


							Select all file types
						
Select your .pem file for the key pair that you specified when you launch your instance, and then choose Open. Choose OK to dismiss the confirmation dialog box.

Choose Save private key to save the key in the format that PuTTY can use. PuTTYgen displays a warning about saving the key without a passphrase. Choose Yes.

Note
A passphrase on a private key is an extra layer of protection, so even if your private key is discovered, it can't be used without the passphrase. The downside to using a passphrase is that it makes automation harder because human intervention is needed to log on to an instance, or copy files to an instance.
Specify the same name for the key that you used for the key pair (for example, my-key-pair). PuTTY automatically adds the .ppk file extension.

Your private key is now in the correct format for use with PuTTY. You can now connect to your instance using PuTTY's SSH client.

Starting a PuTTY Session

Use the following procedure to connect to your Linux instance using PuTTY. You need the .ppk file that you created for your private key. If you receive an error while attempting to connect to your instance, see Troubleshooting Connecting to Your Instance.

To start a PuTTY session

(Optional) You can verify the RSA key fingerprint on your instance using the get-console-output (AWS CLI) command on your local system (not on the instance). This is useful if you've launched your instance from a public AMI from a third party. Locate the SSH HOST KEY FINGERPRINTS section, and note the RSA fingerprint (for example, 1f:51:ae:28:bf:89:e9:d8:1f:25:5d:37:2d:7d:b8:ca:9f:f5:f1:6f) and compare it to the fingerprint of the instance.

Copy
aws ec2 get-console-output --instance-id instance_id
Here is an example of what you should look for:

-----BEGIN SSH HOST KEY FINGERPRINTS-----
... 1f:51:ae:28:bf:89:e9:d8:1f:25:5d:37:2d:7d:b8:ca:9f:f5:f1:6f ...
-----END SSH HOST KEY FINGERPRINTS-----
Note that the SSH HOST KEY FINGERPRINTS section is only available after the first boot of the instance.

Start PuTTY (from the Start menu, choose All Programs > PuTTY > PuTTY).

In the Category pane, select Session and complete the following fields:

In the Host Name box, enter user_name@public_dns_name. Be sure to specify the appropriate user name for your AMI. For example:

For an Amazon Linux AMI, the user name is ec2-user.
For a RHEL AMI, the user name is ec2-user or root.
For an Ubuntu AMI, the user name is ubuntu or root.
For a Centos AMI, the user name is centos.
For a Fedora AMI, the user name is ec2-user.
For SUSE, the user name is ec2-user or root.
Otherwise, if ec2-user and root don't work, check with the AMI provider.
(IPv6 only) To connect using your instance's IPv6 address, enter user_name@ipv6_address. Be sure to specify the appropriate user name for your AMI. For example:

For an Amazon Linux AMI, the user name is ec2-user.
For a RHEL AMI, the user name is ec2-user or root.
For an Ubuntu AMI, the user name is ubuntu or root.
For a Centos AMI, the user name is centos.
For a Fedora AMI, the user name is ec2-user.
For SUSE, the user name is ec2-user or root.
Otherwise, if ec2-user and root don't work, check with the AMI provider.
Under Connection type, select SSH.

Ensure that Port is 22.


							PuTTY configuration - Session
						
In the Category pane, expand Connection, expand SSH, and then select Auth. Complete the following:

Choose Browse.

Select the .ppk file that you generated for your key pair, and then choose Open.

(Optional) If you plan to start this session again later, you can save the session information for future use. Select Session in the Category tree, enter a name for the session in Saved Sessions, and then choose Save.

Choose Open to start the PuTTY session.


							PuTTY configuration - Auth
						
If this is the first time you have connected to this instance, PuTTY displays a security alert dialog box that asks whether you trust the host you are connecting to.

(Optional) Verify that the fingerprint in the security alert dialog box matches the fingerprint that you previously obtained in step 1. If these fingerprints don't match, someone might be attempting a "man-in-the-middle" attack. If they match, continue to the next step.

Choose Yes. A window opens and you are connected to your instance.


on succesful connect - type ->
cd apps/parse/htdocs ->
vi server.js ->

download project base from http://androiddevcourse.com/parseproject.zip

in StarterAplication in Parse.initialize() add 
AppId as applicationId
masterKey as clientKey
serverURL as server - put backslash on te end of url after parse - to look like  
http://ec2-54-245-63-66.us-west-2.compute.amazonaws.com:80/parse/

use serverURL in browser, just switch parse on the end to apps
http://ec2-54-245-63-66.us-west-2.compute.amazonaws.com:80/apps

Username: user

Password: -> On EC2 / Amazon you must go this way: Instance Settings -> Get System Log -> Look for your password, which was given from system by setup


===AndroidManifest.xml

<?xml version="1.0" encoding="utf-8"?><!--
  ~ Copyright (c) 2015-present, Parse, LLC.
  ~ All rights reserved.
  ~
  ~ This source code is licensed under the BSD-style license found in the
  ~ LICENSE file in the root directory of this source tree. An additional grant
  ~ of patent rights can be found in the PATENTS file in the same directory.
-->
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.parse.starter">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />

    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />

    <application
        android:name=".StarterApplication"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/AppTheme">

        <activity
            android:name=".MainActivity"
            android:label="@string/app_name">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>


    </application>

</manifest>


===StarterActivity

import android.app.Application;
import android.util.Log;

import com.parse.Parse;
import com.parse.ParseACL;
import com.parse.ParseException;
import com.parse.ParseObject;
import com.parse.ParseUser;
import com.parse.SaveCallback;


public class StarterApplication extends Application {

  @Override
  public void onCreate() {
    super.onCreate();

    // Enable Local Datastore.
    Parse.enableLocalDatastore(this);

    // Add your initialization code here
    Parse.initialize(new Parse.Configuration.Builder(getApplicationContext())
            .applicationId("bc3714433327b5c543445a16306839973a960de1")
            .clientKey("c2201ad73627e846a81a1fe580469b9bb47698c4")
            .server("http://ec2-54-245-63-66.us-west-2.compute.amazonaws.com:80/parse/")
            .build()
    );

    /*ParseObject object = new ParseObject("ExampleObject");
    object.put("myNumber", "123");
    object.put("myString", "rob");

    object.saveInBackground(new SaveCallback () {
      @Override
      public void done(ParseException ex) {
        if (ex == null) {
          Log.i("Parse Result", "Successful!");
        } else {
          Log.i("Parse Result", "Failed" + ex.toString());
        }
      }
    });*/


    ParseUser.enableAutomaticUser();

    ParseACL defaultACL = new ParseACL();
    defaultACL.setPublicReadAccess(true);
    defaultACL.setPublicWriteAccess(true);
    ParseACL.setDefaultACL(defaultACL, true);

  }
}


//////CRUD PARSE OBJECTS//////////////////////////

//CREATE////////
/* //parse object - classname will be Score taken by constructor
      ParseObject score = new ParseObject("Score");
      //put data to score
      //value 1 -> key + data
      score.put("username", "rob");
      //value 2 -> key + data
      score.put("score", 86);
      //to save save in background just to save or save eventually to save when be opportunity(like connection lol)
      //both with callback gives us opportunity to see was save successful or not
      score.saveInBackground(new SaveCallback() {
          @Override
          public void done(ParseException e) {

              if (e == null) {
                  Log.i("SaveInBackground", "Successful");
              } else {
                  Log.i("SaveInBackground", "Unsuccessful: "+e.toString());
              }
          }
      });*/

////READ//
      /*//object from ParseServer
      ParseQuery<ParseObject> query = ParseQuery.getQuery("Score");

      //object id for query - from parseServer page (http://ec2-54-245-63-66.us-west-2.compute.amazonaws.com/apps/My%20Bitnami%20Parse%20API/browser/_Session)
      query.getInBackground("gZ9L2cQfQu", new GetCallback<ParseObject>() {
          @Override
          public void done(ParseObject object, ParseException e) {

              if(e==null && object!=null){
                  Log.i("Query", "Successful");
                  Log.i("ObjectValue username",object.getString("username"));
                  Log.i("ObjectValue score",Integer.toString(object.getInt("score")));
              }else{
                  Log.i("Query",object.getString("username"));

              }
          }
      });*/


////UPDATE//
     /* //object from ParseServer
      ParseQuery<ParseObject> query = ParseQuery.getQuery("Score");

      //object id for query - from parseServer page (http://ec2-54-245-63-66.us-west-2.compute.amazonaws.com/apps/My%20Bitnami%20Parse%20API/browser/_Session)
      query.getInBackground("gZ9L2cQfQu", new GetCallback<ParseObject>() {
          @Override
          public void done(ParseObject object, ParseException e) {

              if(e==null && object!=null){
                  Log.i("Query", "Successful");

                  object.put("score",200);
                  object.saveInBackground();
                  Log.i("ObjectValue username",object.getString("username"));
                  Log.i("ObjectValue score",Integer.toString(object.getInt("score")));
              }else{
                  Log.i("Query",object.getString("username"));

              }
          }
      });*/

////DELETE//
     /* //object from ParseServer
      ParseQuery<ParseObject> query = ParseQuery.getQuery("Score");

      //object id for query - from parseServer page (http://ec2-54-245-63-66.us-west-2.compute.amazonaws.com/apps/My%20Bitnami%20Parse%20API/browser/_Session)
      query.getInBackground("gZ9L2cQfQu", new GetCallback<ParseObject>() {
          @Override
          public void done(ParseObject object, ParseException e) {

              if(e==null && object!=null){
                  Log.i("Query", "Successful");

                   try {
                      object.delete();
                  } catch (ParseException e1) {
                      e1.printStackTrace();
                  }
                  object.saveInBackground();
              }else{
                  Log.i("Query",object.getString("username"));

              }
          }
      });*/












i-036bfd73c13149c0a  
ec2-54-245-63-66.us-west-2.compute.amazonaws.com  
93.75.231.20                                                                                                                             