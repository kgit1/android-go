<html lang="en"><head>

  <meta charset="UTF-8">
  <link rel="shortcut icon" type="image/x-icon" href="https://production-assets.codepen.io/assets/favicon/favicon-8ea04875e70c4b0bb41da869e81236e54394d63638a1ef12fa558a4a835f1164.ico">
  <link rel="mask-icon" type="" href="https://production-assets.codepen.io/assets/favicon/logo-pin-f2d2b6d2c61838f7e76325261b7195c27224080bc099486ddd6dccb469b8e8e6.svg" color="#111">
  <title>CodePen - Quoter</title>
  
  
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/meyer-reset/2.0/reset.min.css">

  <link rel="stylesheet prefetch" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.2/css/bootstrap.css">
<link rel="stylesheet prefetch" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">

      <style>
      .header{
  z-index:99;
  position:fixed;
/*   display:block; */
  width:100%;
  height:200px;
  background:blue;
  margin:0;
  padding:0;
}
.top{
  z-index: 99;
  width:100%;
  height:60px;
  min-height:60px;
  background:white;
  position:fixed;
/*   opacity:0.5; */
/*   position:relative; */
/*   padding:30px; */
}
.main{  
  margin:0px auto 10px auto;  
  padding:110px 0 0 0;
  min-height:700px;
  win-width:300px;
  max-width:900px;
  background:white;
}
.quotes{
  max-width:900px;
  min-width:400px;
  padding:30px;
}
.quotesBot{
  max-width:900px;
  min-width:400px;
  padding:0px 30px 0px 30px;
  margin:auto;
}
#button{
  float:right;
  padding:0px 50px 0px 0px;
  margin:auto;
}
footer{ 
  display:block;
  min-height:200px;
  mon-width:300px;
  background:white;
  width:100%;
  padding:20px;
} 
.twit{
  margin:0px 0px 0px 30px;
}
.buttons{
/*   display:block; */
/*     background:red; */
  min-width:400px;
}
    </style>

  <script>
  window.console = window.console || function(t) {};
</script><style></style>

  
  
  <script>
  if (document.location.search.match(/type=embed/gi)) {
    window.parent.postMessage("resize", "*");
  }
</script>


</head>

<body translate="no">

  <!-- <div class="container fluid"> -->
<div>
<header class="top">  
<!--   <p>Lorem</p> -->
  </header>
  <div class="main">
    <div class="quotes">
<!--       <h3>If your enemy is secure at all points, be prepared for him. If he is in superior strength, evade him. If your opponent is temperamental, seek to irritate him. Pretend to be weak, that he may grow arrogant. If he is taking his ease, give him no rest. If his forces are united, separate them. Attack him where he is unprepared, appear where you are not expected.</h3> -->
      <blockquote class="blockquote text-right">
        <p id="message">If your enemy is secure at all points, be prepared for him. If he is in superior strength, evade him. If your opponent is temperamental, seek to irritate him. Pretend to be weak, that he may grow arrogant. If he is taking his ease, give him no rest. If his forces are united, separate them. Attack him where he is unprepared, appear where you are not expected.</p>
        <div class="blockquote-footer">Chinese general, military strategist - <cite title="Source Title"><a id="author" href="https://en.wikiquote.org/wiki/Sun_Tzu" target="_blank">Sun Tzu</a></cite></div>
      </blockquote>
    </div>
    <div class="buttons">
    <div id="button">
      <button class="btn btn-primary btn-lg border border-warning">NEXT</button>
    </div>
    <button class="btn btn-primary btn-lg float-left twit border border-warning rounded-circle" style="border-width:13px !important;"><i class="fa fa-twitter"></i></button>
    </div></div>
  <hr>
  <footer>
    <div class="quotesBot">
      <div class="row">
        <div class="col col-3">
          <h3>Chak</h3>
          <p id="chak"></p>
        </div>
        <div class="col col-3">
          <h3>Dad</h3>
          <p id="dad"></p>
        </div>
        <div class="col col-3">
          <h3>Donald</h3>
          <p id="donald"></p>
        </div>
        <div class="col col-3">
          <h3>Design</h3>
          <p id="design"></p>
        </div>
      
      </div>
    </div>
    
  </footer>  
</div>
<!-- </div> -->
    <script src="//production-assets.codepen.io/assets/common/stopExecutionOnTimeout-b2a7b3fe212eaa732349046d8416e00a9dec26eb7fd347590fbced3ab38af52e.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>

  

    <script>
      var apiQuotes=[];

function getChak(){
  $.getJSON("https://api.chucknorris.io/jokes/random",function(json){ 
    $("#chak").html(json["value"]);
  });  
}

function getDadJokes(){   
  $.getJSON("https://icanhazdadjoke.com",function(json){    
    $("#dad").html(json["joke"]);
  });  
}

function getDonald(){  
  $.getJSON("https://cors.io/?https://api.tronalddump.io/random/quote",function(json){    
    $("#donald").html(json["value"]);
    console.log( "success" );
    console.log(json);
     })
  .done(function() {
    console.log( "second success" );
  })
  .fail(function() {
    console.log( "error" );
  })
  .always(function() {
    console.log( "complete" );
  });
  // Perform other work here ...
 
// Set another completion function for the request above
// jqxhr.complete(function() {
//   console.log( "second complete" );
// });
}

function getDesignQuotes(){ 
  var timeStamp=new Date().getTime();
  var cachePreventer="_:"+timeStamp;
  $.getJSON("https://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=1"+cachePreventer,function(json){
    // new Date().getTime();
    var result=json.shift();
    $("#design").html(result.content);
    console.log("result: "+JSON.stringify(result));  
    //=====CACHE
//     You can use either this, that will disable cache globally:

// $(document).ready(function() {
//   $.ajaxSetup({ cache: false });
// });
// or that, instead of $.getJSON, to disable the cache just for such request:

// $.ajax({
//     cache: false,
//     url: "/path/to.json",
//     dataType: "json",
//     success: function(data) {
//         ...
//     }
// });
    
//     but if you want to use $.getJSON and elsewhere take advantage of it's caching (you don't want to set the cache to false for all calls), but you want to bust the cache just for a single call, you can inject a timestamp into data property of $.getJSON(). By adding a unique value to the query string of the request, the request will always be unique and not be cached by the browser - you will always get the latest data.

// Long version:

// var ts = new Date().getTime();
// var data = {_: ts};
// var url = '/some/path.json';

// $.getJSON(url, data);
// All in one version:

// $.getJSON('/some/path', {_: new Date().getTime()});
// Both result in the following request:

// /some/path.json?_=1439315011130 
// where the number at the end is the timestamp for the moment that the code is called and will therefore always be unique.
    
    
  });}
  
  //===========WORKING===========
  //  $.ajax( {
  //     url: '//quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=1',
  //     success: function(data) {
  //       var post = data.shift(); // The data is an array of posts. Grab the first one.
  //       $('#quote-title').text(post.title);
  //       $('#quote-content').html(post.content);
  //       $(".chak").html(post.content);
  //       console.log(post.title);
  //       console.log(post.content);
  //       // If the Source is available, use it. Otherwise hide it.
  //       if (typeof post.custom_meta !== 'undefined' && typeof post.custom_meta.Source !== 'undefined') {
  //         $('#quote-source').html('Source:' + post.custom_meta.Source);
  //       } else {
  //         $('#quote-source').text('');
  //       }
  //     },
  //     cache: false
  //   });
  // };
  //=============^^^^^WORKING===========

//====AUTHOR==============

// $("#get-another-quote-button").on("click",function(t){
//   t.preventDefault(),
// $.ajax({url:"/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=1",
// success:function(t){var e=t.shift();
// $("#quote-title").text(e.title),
// $("#quote-content").html(e.content),
// "undefined"!=typeof e.custom_meta&&"undefined"!=typeof e.custom_meta.Source?$("#quote-source").html("Source: "+e.custom_meta.Source):$("#quote-source").text("");var o="http://twitter.com/home?status=",n=e.content.replace(/(<([^>]+)>)/gi,""),u=n.substring(0,108);o+=u+"...",o+=" "+e.link,$("#twitter").attr("href",o),window.history.replaceState({},"",e.link),window.document.title="Quotes on Design"},cache:!1})});


//===========================
  
// $.getJSON("//quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=1", function(json) {
//   //"//quotesondesign.com/wp-json/posts"
//   $(".chak").html(json["content"]);
//   // $(".chak").html(JSON.stringify(json));
//   console.log( "success1: " +json.ID);
//   console.log( "success2: " +json.content);
//   console.log( "success3: " +json.title);
//   console.log( "success4: " +JSON.stringify(json[0]));
//   console.log( "success5: " +JSON.stringify(json));
// })
//   .done(function() {
//     console.log( "second success" );
//   })
//   .fail(function() {
//     console.log( "error" );
//   })
//   .always(function() {
//     console.log( "complete" );
//   });
 

 // Using YQL and JSONP
// $.ajax({
//     url: "http://query.yahooapis.com/v1/public/yql",
 
//     // The name of the callback parameter, as specified by the YQL service
//     jsonp: "callback",
 
//     // Tell jQuery we're expecting JSONP
//     dataType: "jsonp",
 
//     // Tell YQL what we want and that we want JSON
//     data: {
//         q: "select title,abstract,url from search.news where query=\"cat\"",
//         format: "json"
//     },
 
//     // Work with the response
//     success: function( response ) {
//         console.log( response ); // server response
//     }
// });
// jQuery handles all the complex aspects of JSONP behind-the-scenes — all we have to do is tell jQuery the name of the JSONP callback parameter specified by YQL ("callback" in this case), and otherwise the whole process looks and feels like a normal Ajax request. 
// }



// A simple example
//https://css-tricks.com/using-the-wp-api-to-fetch-posts/
// $('#get-another-quote-button').on('click', function(e) {
//     e.preventDefault();
//     $.ajax( {
//       url: '/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=1',
//       success: function(data) {
//         var post = data.shift(); // The data is an array of posts. Grab the first one.
//         $('#quote-title').text(post.title);
//         $('#quote-content').html(post.content);

//         // If the Source is available, use it. Otherwise hide it.
//         if (typeof post.custom_meta !== 'undefined' && typeof post.custom_meta.Source !== 'undefined') {
//           $('#quote-source').html('Source:' + post.custom_meta.Source);
//         } else {
//           $('#quote-source').text('');
//         }
//       },
//       cache: false
//     });
//   });
// });





var quotes=[
  "All warfare is based on deception. Hence, when we are able to attack, we must seem unable; when using our forces, we must appear inactive; when we are near, we must make the enemy believe we are far away; when far away, we must make him believe we are near.",
  "If your enemy is secure at all points, be prepared for him. If he is in superior strength, evade him. If your opponent is temperamental, seek to irritate him. Pretend to be weak, that he may grow arrogant. If he is taking his ease, give him no rest. If his forces are united, separate them. Attack him where he is unprepared, appear where you are not expected.",
  "Hold out baits to entice the enemy. Feign disorder, and crush him",
  "The art of war is of vital importance to the State. It is a matter of life and death, a road either to safety or to ruin. Hence it is a subject of inquiry which can on no account be neglected.",
  "What is essential in war is victory, not prolonged operations.",
  "It is said that if you know your enemies and know yourself, you will not be imperiled in a hundred battles; if you do not know your enemies but do know yourself, you will win one and lose one; if you do not know your enemies nor yourself, you will be imperiled in every single battle.",
  "It is the rule in war, if ten times the enemy's strength, surround them; if five times, attack them; if double, be able to divide them; if equal, engage them; if fewer, defend against them; if weaker, be able to avoid them.",
  "For to win one hundred victories in one hundred battles is not the acme of skill. To subdue the enemy without fighting is the acme of skill.",
  "What the ancients called a clever fighter is one who not only wins, but excels in winning with ease."
];
var authors="Sun Tzu";
var min = 0;
var max = quotes.length;
function newQuote(){
  var number = Math.floor(Math.random()*(max-min+1))+min;
  var quote = quotes[number];
  var author=authors+number;
  $("#message").html(quote);
  $("#author").html(author);
}




$(document).ready(function() {
$("#button").on("click",newQuote);
  $(".twit").on("click",getChak);
  $(".twit").on("click",getDadJokes);
  $(".twit").on("click",getDonald);
  $(".twit").on("click",getDesignQuotes);
  
});


//==============================

// (function() {
//   var flickerAPI = "http://api.flickr.com/services/feeds/photos_public.gne?jsoncallback=?";
//   $.getJSON( flickerAPI, {
//     tags: "mount rainier",
//     tagmode: "any",
//     format: "json"
//   })
//     .done(function( data ) {
//       $.each( data.items, function( i, item ) {
//         $( "<img>" ).attr( "src", item.media.m ).appendTo( "#images" );
//         if ( i === 3 ) {
//           return false;
//         }
//       });
//     });
// })();


//===================

// var HttpClient = function() {
//     this.get = function(aUrl, aCallback) {
//         var anHttpRequest = new XMLHttpRequest();
//         anHttpRequest.onreadystatechange = function() { 
//             if (anHttpRequest.readyState == 4 && anHttpRequest.status == 200)
//                 aCallback(anHttpRequest.responseText);
//         }

//         anHttpRequest.open( "GET", aUrl, true );            
//         anHttpRequest.send( null );
//     }
// }

// var client = new HttpClient();
// client.get('http://some/thing?with=arguments', function(response) {
//     // do something with response
// });


//===========


// 101
// down vote
// accepted
// Sending and receiving data in JSON format using POST method
// // Sending and receiving data in JSON format using POST method
// //
// var xhr = new XMLHttpRequest();
// var url = "url";
// xhr.open("POST", url, true);
// xhr.setRequestHeader("Content-type", "application/json");
// xhr.onreadystatechange = function () {
//     if (xhr.readyState === 4 && xhr.status === 200) {
//         var json = JSON.parse(xhr.responseText);
//         console.log(json.email + ", " + json.password);
//     }
// };
// var data = JSON.stringify({"email": "hey@mail.com", "password": "101010"});
// xhr.send(data);
// Sending a receiving data in JSON format using GET method
// // Sending a receiving data in JSON format using GET method
// //
// var xhr = new XMLHttpRequest();
// var url = "url?data=" + encodeURIComponent(JSON.stringify({"email": "hey@mail.com", "password": "101010"}));
// xhr.open("GET", url, true);
// xhr.setRequestHeader("Content-type", "application/json");
// xhr.onreadystatechange = function () {
//     if (xhr.readyState === 4 && xhr.status === 200) {
//         var json = JSON.parse(xhr.responseText);
//         console.log(json.email + ", " + json.password);
//     }
// };
// xhr.send();
      //# sourceURL=pen.js
    </script>



  
  




 </body></html>